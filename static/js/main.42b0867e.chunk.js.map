{"version":3,"sources":["components/JsonField.js","components/Tools.js","App.js","index.js"],"names":["JsonField","formated","className","onClick","navigator","clipboard","writeText","JSON","stringify","alert","length","undefined","Tools","currentColor","textColorHandler","fontSizeHandler","currentFontSize","fontSizes","currentBgColor","bgColorHandler","colorRef","useRef","bgColorRef","handleClick","element","current","click","style","color","cursor","ref","type","name","onChange","defaultValue","map","el","index","App","1","2","3","4","5","6","7","textFieldRef","useState","setCurrentColor","setCurrentBgColor","setCurrentFontSize","formatShow","setFormatShow","setFormated","newArr","navUpdate","range","window","getSelection","getRangeAt","parentList","colorTemp","bgColorTemp","gettingNodeParents","node","push","parentElement","startContainer","nodeList","getIn","childNodes","forEach","newObj","fontColor","text","wholeText","fontSize","size","bgColor","backgroundColor","parsingAnObject","e","document","execCommand","target","value","Object","keys","contentEditable","spellCheck","onInput","onKeyUp","onKeyDown","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.42b0867e.chunk.js","sourcesContent":["import React from 'react';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nfunction JsonField({ formated }) {\r\n  const onClickCopyHandler = () => {\r\n    navigator.clipboard.writeText(JSON.stringify(formated));\r\n    alert('Copied to clipboard');\r\n  };\r\n  return (\r\n    <pre className='content__formated'>\r\n      <div className='content__button-copy'>\r\n        <FileCopyIcon className='content__button' onClick={onClickCopyHandler} />\r\n      </div>\r\n      <code>{formated.length < 1 ? null : JSON.stringify(formated, undefined, 2)}</code>\r\n    </pre>\r\n  );\r\n}\r\n\r\nexport default JsonField;\r\n","import React, { useRef } from 'react';\r\nimport BgColor from '@material-ui/icons/Opacity';\r\nimport FontSize from '@material-ui/icons/FormatSize';\r\nimport TextColor from '@material-ui/icons/FormatColorText';\r\n\r\nfunction Tools({\r\n  currentColor,\r\n  textColorHandler,\r\n  fontSizeHandler,\r\n  currentFontSize,\r\n  fontSizes,\r\n  currentBgColor,\r\n  bgColorHandler,\r\n}) {\r\n  const colorRef = useRef();\r\n  const bgColorRef = useRef();\r\n\r\n  const handleClick = (element) => {\r\n    element.current.click(); //  показываем скрытый input\r\n  };\r\n  return (\r\n    <div className='content-tools'>\r\n      <div>\r\n        <h5>\r\n          <TextColor\r\n            onClick={() => handleClick(colorRef)}\r\n            style={{ color: currentColor, cursor: 'pointer' }}\r\n          />\r\n        </h5>\r\n        <input\r\n          ref={colorRef}\r\n          type='color'\r\n          name='aloha'\r\n          onChange={textColorHandler}\r\n          onClick={textColorHandler}\r\n        />\r\n      </div>\r\n      <div>\r\n        <h5>\r\n          <FontSize />\r\n        </h5>\r\n        <select onChange={fontSizeHandler} defaultValue={currentFontSize}>\r\n          {fontSizes.map((el, index) => (\r\n            <option key={`${el}_${index}`}>{el[index + 1]}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        <h5>\r\n          <BgColor\r\n            onClick={() => handleClick(bgColorRef)}\r\n            style={{\r\n              color: currentBgColor,\r\n              cursor: 'pointer',\r\n            }}\r\n          />\r\n        </h5>\r\n        <input ref={bgColorRef} type='color' onChange={bgColorHandler} onClick={bgColorHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tools;\r\n","import { useRef, useState } from 'react';\nimport JsonField from './components/JsonField';\nimport Tools from './components/Tools';\n\nfunction App() {\n  const fontSizes = [{ 1: 10 }, { 2: 13 }, { 3: 16 }, { 4: 18 }, { 5: 24 }, { 6: 32 }, { 7: 48 }];\n\n  const textFieldRef = useRef();\n\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [currentBgColor, setCurrentBgColor] = useState('#000000');\n  const [currentFontSize, setCurrentFontSize] = useState(16);\n  const [formatShow, setFormatShow] = useState(false);\n  const [formated, setFormated] = useState([]);\n\n  const fontSizeHandler = (e) => {\n    setCurrentFontSize(+e.target.value);\n    fontSizes.forEach((el) => {\n      if (el[+Object.keys(el)] === +e.target.value) {\n        document.execCommand('fontSize', null, +Object.keys(el));\n        setCurrentFontSize(el[+Object.keys(el)]);\n      }\n    });\n  };\n\n  const textColorHandler = (e) => {\n    document.execCommand('foreColor', null, e.target.value);\n  };\n\n  const bgColorHandler = (e) => {\n    document.execCommand('hiliteColor', null, e.target.value);\n  };\n\n  let newArr = [];\n\n  const navUpdate = () => {\n    const range = window.getSelection().getRangeAt(0);\n    const parentList = [];\n    let colorTemp = '#000000';\n    let bgColorTemp = '#000000';\n    function gettingNodeParents(node) {\n      parentList.push(node);\n      if (node.parentElement) {\n        gettingNodeParents(node.parentElement);\n      }\n    }\n    gettingNodeParents(range.startContainer.parentElement);\n\n    const parsingAnObject = (nodeList) => {\n      const getIn = (node) => {\n        if (node.childNodes.length === 0) {\n          return node;\n        }\n\n        return getIn(node.childNodes[0]);\n      };\n\n      nodeList.forEach((el) => {\n        // создаем обьект с характеристиками\n        let newObj = {};\n        newObj.fontColor = el.color ? el.color : '#000000';\n        if (el.childNodes.length === 0) {\n        } else if (el.childNodes.length >= 1) {\n          newObj.fontColor = el.color\n            ? el.color\n            : el.childNodes[0].color\n            ? el.childNodes[0].color\n            : '#000000';\n        }\n        newObj.text = getIn(el).wholeText; // достаем текст с посденей ноды через рекурсию.\n        newObj.fontSize = el.size ? fontSizes[+el.size - 1][el.size] : 16;\n        newObj.bgColor =\n          el.style && el.style.backgroundColor !== '' ? el.style.backgroundColor : '#FF000000'; // ||\n        newArr.push(newObj);\n      });\n      setFormated(newArr);\n    };\n    parsingAnObject([...textFieldRef.current.childNodes]);\n    parentList.forEach((element) => {\n      if (element.style.backgroundColor.length > 0) {\n        bgColorTemp = element.style.backgroundColor;\n      }\n      if (element.color && element.color.length > 0) {\n        colorTemp = element.color;\n      }\n    });\n    setCurrentColor(colorTemp); // обновляем цвет  кнопки в зависимости цвета под курсором\n    setCurrentBgColor(bgColorTemp); // обновляем цвет  кнопки в зависимости цвета под курсором\n  };\n\n  return (\n    <div className='app'>\n      <section className='app__content'>\n        <div className='content__wrapper'>\n          <Tools\n            currentColor={currentColor}\n            textColorHandler={textColorHandler}\n            fontSizeHandler={fontSizeHandler}\n            currentFontSize={currentFontSize}\n            fontSizes={fontSizes}\n            currentBgColor={currentBgColor}\n            bgColorHandler={bgColorHandler}\n          />\n          <div\n            className='content-field'\n            contentEditable='true'\n            spellCheck='true'\n            ref={textFieldRef}\n            onClick={navUpdate}\n            onInput={navUpdate}\n            onKeyUp={navUpdate}\n            onKeyDown={navUpdate}></div>\n          <button onClick={() => setFormatShow(!formatShow)} className='content__button'>\n            Format to JSON\n          </button>\n          {formatShow && <JsonField formated={formated} />}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}